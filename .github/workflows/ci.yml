name: Build, Test, and Publish

on:
  push:
    tags:
      - "v*"  # O pipeline será acionado ao fazer push de uma tag de versão.
  pull_request:
    branches:
      - master
      - develop

jobs:
  build-and-test:
    runs-on: ubuntu-20.04

    steps:
    # 0. Print All Env Vars
    - name: List All Environment Variables
      run: env  
    # 1. Checkout do código
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Usar uma imagem de build com Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.0  # Use a versão do Python do seu projeto

    # 3. Instalar dependências com Poetry
    - name: Install dependencies
      run: |
        pip install poetry
        poetry install

    - name: Install project package
      run: |
        poetry run pip install -e .  

    # 4. Rodar os testes
    - name: Run tests with coverage
      run: |
        export PYTHONPATH="$PYTHONPATH:$GITHUB_WORKSPACE/src"
        poetry run pytest --cov=src --cov-report=xml --cov-report=term

    # 5. Rodar o lint
    - name: Lint code
      run: poetry run flake8 src || echo "Lint warnings detected."

    # 6. Gerar relatórios
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml

  publish:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    needs: build-and-test

    steps:
    # 0. Print All Env Vars
    - name: List All Environment Variables
      run: env  
    
      # 1. Checkout do código
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Configurar Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10.0

    # 3. Instalar dependências com Poetry
    - name: Install dependencies
      run: |
        pip install poetry
        poetry install

    # 4. Build do pacote
    - name: Build package
      run: poetry build

    - name: Get Poetry Version
      run: |
        VERSION=$(poetry version | awk '{print $2}')
        echo "Current version: $VERSION"  
    
    #- name: Print PYPI Token to Debug Process
    #  run: echo "POETRY_PYPI_TOKEN_PYPI=${{ vars.POETRY_PYPI_TOKEN_PYPI }}" 
    
    - name: Confirm PYPI Token is Set
      run: |
        if [ -z "${{ vars.POETRY_PYPI_TOKEN_PYPI }}" ]; then
          echo "Token is missing!"
          exit 1
        else
          echo "Token is set."
        fi

    - name: Check if PyPI version exists
      run: |
          VERSION=$(poetry version --short)
          echo "Checking if version $VERSION exists on PyPI..."
          if curl -s https://pypi.org/project/data-market-index-fetcher/$VERSION/ | grep "Not Found"; then
            echo "Version $VERSION is available for publishing."
          else
            echo "Version $VERSION already exists on PyPI. Increment the version."
            exit 1
          fi
          
    # 5. Publish to PyPI
    - name: Publish to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ vars.POETRY_PYPI_TOKEN_PYPI }}
      run: poetry publish